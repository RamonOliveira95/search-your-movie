// Mocks generated by Mockito 5.4.5 from annotations
// in search_your_movie/test/domain/cases/search_movies_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:search_your_movie/domain/entities/movie.dart' as _i2;
import 'package:search_your_movie/domain/repositories/movie_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovie_0 extends _i1.SmartFake implements _i2.Movie {
  _FakeMovie_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Movie>> searchMovies(String? query, int? page) =>
      (super.noSuchMethod(
            Invocation.method(#searchMovies, [query, page]),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<_i2.Movie> getMovieDetails(String? imdbID) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieDetails, [imdbID]),
            returnValue: _i4.Future<_i2.Movie>.value(
              _FakeMovie_0(this, Invocation.method(#getMovieDetails, [imdbID])),
            ),
          )
          as _i4.Future<_i2.Movie>);

  @override
  _i4.Future<void> saveRecentMovie(_i2.Movie? movie) =>
      (super.noSuchMethod(
            Invocation.method(#saveRecentMovie, [movie]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Movie>> getRecentMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getRecentMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);
}
